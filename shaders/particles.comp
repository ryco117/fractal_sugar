#version 450

layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

struct VertexData {
	vec2 pos;
	vec2 vel;
};

layout (binding = 0) buffer VertexBuffer {
	VertexData verticies[];
};
layout (binding = 1) buffer readonly FixedPosBuffer {
	vec2 fixed_positions[];
};

layout (push_constant) uniform PushConstants
{
	vec2 big_boomer;
	vec2 curl_attractors[2];
	vec2 attractors[3];

	float big_boomer_strength;
	float curl_attractor_strengths[2];
	float attractor_strengths[3];

	float time;
	float delta_time;
	bool fix_particles;
} push;

const float spring_coefficient = 75.0;

const float max_speed = 6.0; // Must match `max_speed` in vertex shader
const float min_length = 0.01;

const float audio_scale = 0.01;

vec2 safe_normalize(vec2 t) {
	if(length(t) < 0.000001) {
		return t;
	}
	return normalize(t);
}

void main(void)
{
	const uint index = gl_GlobalInvocationID.x;

	VertexData vert = verticies[index];

	// Read the current position and velocity from the buffers
	vec2 pos = vert.pos;
	vec2 vel = vert.vel;
	
	vec2 g = vec2(0.0);
	float friction;
	if(push.fix_particles)
	{
		friction = -6.5;

		{
			vec2 t = push.big_boomer - pos;
			float r = max(length(t), min_length);
			g -= push.big_boomer_strength * safe_normalize(t) / (r*r*r) * 0.6;
		}

		for(int i = 0; i < push.curl_attractors.length(); i++)
		{
			vec2 t = push.curl_attractors[i] - pos;
			float r = max(length(t), min_length);
			g += push.curl_attractor_strengths[i] * safe_normalize(vec2(-t.y, t.x) + t/1.5) / (r*r) * 2.75;
		}

		for(int i = 0; i < push.attractors.length(); i++)
		{
			vec2 t = push.attractors[i] - pos;
			float r = max(length(t), min_length);
			g += push.attractor_strengths[i] * safe_normalize(t) / (r*r) * 5.25;
		}

		g *= audio_scale;

		g += spring_coefficient * (fixed_positions[index] - pos);
	}
	else
	{
		friction = -1.5;

		{
			vec2 t = push.big_boomer - pos;
			float r = max(length(t), min_length);
			g -= push.big_boomer_strength * safe_normalize(t) / (r*r*r) * 0.85;
		}

		for(int i = 0; i < push.curl_attractors.length(); i++)
		{
			vec2 t = push.curl_attractors[i] - pos;
			float r = max(length(t), min_length);
			g += push.curl_attractor_strengths[i] * safe_normalize(vec2(-t.y, t.x) + t/1.5) / (r*r) * 5.0;
		}

		for(int i = 0; i < push.attractors.length(); i++)
		{
			vec2 t = push.attractors[i] - pos;
			float r = max(length(t), min_length);
			g += push.attractor_strengths[i] * safe_normalize(t) / (r*r) * 8.75;
		}

		g *= audio_scale;
	}

	vel += push.delta_time * g;
	
	if(length(vel) > max_speed) {
		vel = max_speed*normalize(vel);
	}

	pos += vel * push.delta_time;
	if(abs(pos.x) > 1.0) {
		vel.x = sign(pos.x) * (-0.95 * abs(vel.x) - 0.0001);
		if(abs(pos.x) >= 1.05) {
			pos.x = sign(pos.x);
		}
	}
	if(abs(pos.y) > 1.0) {
		vel.y = sign(pos.y) * (-0.95 * abs(vel.y) - 0.0001);
		if(abs(pos.y) >= 1.05) {
			pos.y = sign(pos.y);
		}
	}

	verticies[index].pos = pos;
	verticies[index].vel = vel * exp(friction * push.delta_time);
}