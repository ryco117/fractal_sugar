#version 450

layout (local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

struct VertexData {
	vec3 pos;
	vec3 vel;
};

layout (binding = 0) buffer VertexBuffer {
	VertexData verticies[];
};

layout (binding = 1) buffer readonly FixedSquarePosBuffer {
	vec2 fixed_square_positions[];
};

layout (binding = 2) buffer readonly FixedCubePosBuffer {
	vec3 fixed_cube_positions[];
};

layout (binding = 3) uniform AppConstants {
	float max_speed;
	float particle_count;
	float spring_coefficient;
	float point_size;
	float friction_scale;

	float audio_scale;

	float vertical_fov;
} appConstants;

layout (push_constant) uniform PushConstants {
	vec4 big_boomer;
	vec4 curl_attractors[2];
	vec4 attractors[3];

	float time;
	float delta_time;
	float width;
	float height;
	bool fix_particles;
	bool use_third_dimension;
} push;

const float min_length = 0.01;

vec2 safe_normalize(vec2 t) {
	if(dot(t,t) < 0.0000001) {
		return t;
	}

	return normalize(t);
}
vec3 safe_normalize(vec3 t) {
	if(dot(t,t) < 0.0000001) {
		return t;
	}

	return normalize(t);
}

void main(void) {
	const uint index = gl_GlobalInvocationID.x;

	VertexData vert = verticies[index];

	// Read the current position and velocity from the buffers
	vec3 pos = vert.pos;
	vec3 vel = vert.vel;

	vec3 g = vec3(0.0);
	float friction;
	if(push.use_third_dimension) {
		if(push.fix_particles) {
			friction = -7.0;

			{
				vec3 t = push.big_boomer.xyz - pos;
				float r = max(length(t), min_length);
				g -= push.big_boomer.w * safe_normalize(t) / (r*r*r*r*r) * 2.4;
			}

			for(int i = 0; i < push.curl_attractors.length(); i++) {
				vec3 t = push.curl_attractors[i].xyz - pos;
				float r = max(length(t), min_length);
				g += push.curl_attractors[i].w * (safe_normalize(cross(t, pos)) + safe_normalize(t)/1.25) / (r*r) * 18.5;
			}

			for(int i = 0; i < push.attractors.length(); i++) {
				vec3 t = push.attractors[i].xyz - pos;
				float r = max(length(t), min_length);
				g += push.attractors[i].w * safe_normalize(t) / (r*r) * 34.0;
			}

			g *= appConstants.audio_scale;

			g += appConstants.spring_coefficient * (fixed_cube_positions[index] - pos);
		} else {
			friction = -2.2;

			{
				vec3 t = push.big_boomer.xyz - pos;
				float r = max(length(t), min_length);
				g -= push.big_boomer.w * safe_normalize(t) / (r*r*r*r*r) * 1.4;
			}

			for(int i = 0; i < push.curl_attractors.length(); i++) {
				vec3 t = push.curl_attractors[i].xyz - pos;
				float r = max(length(t), min_length);
				g += push.curl_attractors[i].w * (safe_normalize(cross(t, pos)) + safe_normalize(t)/1.25) / (r*r) * 11.5;
			}

			for(int i = 0; i < push.attractors.length(); i++) {
				vec3 t = push.attractors[i].xyz - pos;
				float r = max(length(t), min_length);
				g += push.attractors[i].w * safe_normalize(t) / (r*r) * 17.5;
			}

			g *= appConstants.audio_scale;
		}

		vel += push.delta_time * g;

		if(length(vel) > appConstants.max_speed) {
			vel = appConstants.max_speed*normalize(vel);
		}

		pos += vel * push.delta_time;
	} else { // Start 2D block
		mat2 aspect;
		mat2 invaspect;
		if(push.width > push.height) {
			aspect = mat2(push.width / push.height, 0.0 , 0.0, 1.0);
			invaspect = mat2(push.height / push.width, 0.0 , 0.0, 1.0);
		} else {
			aspect = mat2(1.0, 0.0 , 0.0, push.height / push.width);
			invaspect = mat2(1.0, 0.0 , 0.0, push.width / push.height);
		}

		if(push.fix_particles) {
			friction = -6.5;

			{
				vec2 t = push.big_boomer.xy - pos.xy;
				t = aspect * t;
				float r = max(length(t), min_length);
				g.xy -= push.big_boomer.w * safe_normalize(t) / (r*r*r) * 0.65;
			}

			for(int i = 0; i < push.curl_attractors.length(); i++) {
				vec2 t = push.curl_attractors[i].xy - pos.xy;
				t = aspect * t;
				float r = max(length(t), min_length);
				g.xy += push.curl_attractors[i].w * safe_normalize(vec2(-t.y, t.x) + t/1.5) / (r*r) * 2.85;
			}

			for(int i = 0; i < push.attractors.length(); i++) {
				vec2 t = push.attractors[i].xy - pos.xy;
				t = aspect * t;
				float r = max(length(t), min_length);
				g.xy += push.attractors[i].w * safe_normalize(t) / (r*r) * 5.25;
			}

			g *= appConstants.audio_scale;

			g.xy += appConstants.spring_coefficient * (aspect * (fixed_square_positions[index] - pos.xy));
		} else {
			friction = -1.85;

			{
				vec2 t = push.big_boomer.xy - pos.xy;
				t = aspect * t;
				float r = max(length(t), min_length);
				g.xy -= push.big_boomer.w * safe_normalize(t) / (r*r*r) * 0.85;
			}

			for(int i = 0; i < push.curl_attractors.length(); i++) {
				vec2 t = push.curl_attractors[i].xy - pos.xy;
				t = aspect * t;
				float r = max(length(t), min_length);
				g.xy += push.curl_attractors[i].w * safe_normalize(vec2(-t.y, t.x) + t/1.45) / (r*r) * 5.0;
			}

			for(int i = 0; i < push.attractors.length(); i++) {
				vec2 t = push.attractors[i].xy - pos.xy;
				t = aspect * t;
				float r = max(length(t), min_length);
				g.xy += push.attractors[i].w * safe_normalize(t) / (r*r) * 8.75;
			}

			g *= appConstants.audio_scale;
		}

		vel.xy += push.delta_time * g.xy;

		if(length(vel) > appConstants.max_speed) {
			vel = appConstants.max_speed*normalize(vel);
		}

		pos.xy += push.delta_time * (invaspect * vel.xy);
	} // End 2D block

	// Allow scaling of friction force applied
	friction *= appConstants.friction_scale;

	if(abs(pos.x) > 1.0) {
		vel.x = sign(pos.x) * (-0.95 * abs(vel.x) - 0.0001);
		if(abs(pos.x) >= 1.05) {
			pos.x = sign(pos.x);
		}
	}
	if(abs(pos.y) > 1.0) {
		vel.y = sign(pos.y) * (-0.95 * abs(vel.y) - 0.0001);
		if(abs(pos.y) >= 1.05) {
			pos.y = sign(pos.y);
		}
	}
	if(abs(pos.z) > 1.0) {
		vel.z = sign(pos.z) * (-0.95 * abs(vel.z) - 0.0001);
		if(abs(pos.z) >= 1.05) {
			pos.z = sign(pos.z);
		}
	}

	verticies[index].pos = pos;
	verticies[index].vel = vel * exp(friction * push.delta_time);
}